#ifndef REP_AWAKEN_REPLICA_H
#define REP_AWAKEN_REPLICA_H

// This is an autogenerated file.
// Do not edit this file, any changes made will be lost the next time it is generated.

#include <QtCore/qobject.h>
#include <QtCore/qdatastream.h>
#include <QtCore/qvariant.h>
#include <QtCore/qmetatype.h>

#include <QtRemoteObjects/qremoteobjectnode.h>
#include <QtRemoteObjects/qremoteobjectpendingcall.h>
#include <QtRemoteObjects/qremoteobjectreplica.h>


class awakenReplica : public QRemoteObjectReplica
{
    Q_OBJECT
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_TYPE, "awaken")
    Q_CLASSINFO(QCLASSINFO_REMOTEOBJECT_SIGNATURE, "4c4c86c06dd2ba86416463260a92055c7487992a")

public:
    awakenReplica() : QRemoteObjectReplica() { initialize(); }
    static void registerMetatypes()
    {
        static bool initialized = false;
        if (initialized)
            return;
        initialized = true;
        qRegisterMetaType<QRemoteObjectPendingCall>();
        qRegisterMetaType<QRemoteObjectPendingReply<void>>();
        if (!QMetaType::hasRegisteredConverterFunction<QRemoteObjectPendingReply<void>, QRemoteObjectPendingCall>())
            QMetaType::registerConverter<QRemoteObjectPendingReply<void>, QRemoteObjectPendingCall>();

    }

private:
    awakenReplica(QRemoteObjectNode *node, const QString &name = QString())
        : QRemoteObjectReplica(ConstructWithNode)
    {
        initializeNode(node, name);
    }

    void initialize() override
    {
        awakenReplica::registerMetatypes();
        QVariantList properties;
        properties.reserve(0);
        setProperties(properties);
    }

public:
    ~awakenReplica() override = default;


public Q_SLOTS:
    void awaken()
    {
        static int __repc_index = awakenReplica::staticMetaObject.indexOfSlot("awaken()");
        QVariantList __repc_args;
        send(QMetaObject::InvokeMetaMethod, __repc_index, __repc_args);
    }

private:
    friend class QT_PREPEND_NAMESPACE(QRemoteObjectNode);
};


QT_BEGIN_NAMESPACE
QT_END_NAMESPACE


#endif // REP_AWAKEN_REPLICA_H
